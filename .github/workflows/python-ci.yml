name: "Python CI/CD Pipeline"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: 'Azure Storage Account Name'
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: 'Azure Storage Account Key'
        required: true
      OPENAI_API_KEY:
        description: 'OpenAI API Key'
        required: true
    inputs:
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Python'
        required: true
        type: string
      requirements-path:
        description: 'La ruta del proyecto donde se encuentran los requisitos del proyecto Python'
        required: false
        type: string
      build-configuration:
        description: 'Configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      build-command:
        description: 'Comando personalizado para construir el proyecto'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto Python y recopilar logs
  ci_pipeline:
    runs-on: ubuntu-24.04
    steps:
      - name: Debug OS Version
        run: lsb_release -a || cat /etc/os-release
        continue-on-error: true
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Set Azure Environment Variables
        run: |
          echo "Setting Azure environment variables..."
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> $GITHUB_ENV
      
      - name: Set OpenAI API Key
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
      
      - name: Verify Secrets
        run: |
          echo "Azure Account Name: ${AZURE_STORAGE_ACCOUNT_NAME}"
          echo "Azure Account Key: ${AZURE_STORAGE_ACCOUNT_KEY}"
          echo "OpenAI API Key: ${OPENAI_API_KEY}"

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          echo "Setting environment variables"
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: |
          echo "Running additional install commands"
          mkdir -p "${GITHUB_WORKSPACE}/logs"
          repo_name=$(basename "${{ github.repository }}")
          ${{ inputs.additional-install-commands }} 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-additional_install.log"
          if [ ! -f "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-additional_install.log" ]; then
            echo "ERROR : Log file for additional dependencies installation was not created!" >&2
            exit 1
          else
            echo "SUCCESS : Log file for additional dependencies installation was created!" >&2
          fi
        
      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          mkdir -p "${GITHUB_WORKSPACE}/logs"
          repo_name=$(basename "${{ github.repository }}")
          if [ -f "${{ inputs.requirements-path }}requirements.txt" ]; then
            pip install -r ${{ inputs.requirements-path }}requirements.txt 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-dependencies.log"
          elif [ -f "${{ inputs.project-path }}pyproject.toml" ]; then
            pip install . 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-dependencies.log"
          else
            echo "No requirements or pyproject.toml file found. Skipping dependency installation." 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-dependencies.log"
          fi
          if [ ! -f "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-dependencies.log" ]; then
            echo "ERROR : Log file for dependencies installation was not created!" >&2
            exit 1
          else
            echo "SUCCESS : Log file for dependencies installation was created!" >&2
          fi

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          echo "Setting environment variables"
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: |
          echo "Building project"
          repo_name=$(basename "${{ github.repository }}")
          if [ -n "${{ inputs.build-command }}" ]; then
            echo "Using custom build command"
            ${{ inputs.build-command }} 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}/setup.py" ]; then
            python ${{ inputs.project-path }}/setup.py build 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}/Makefile" ]; then
            make -C ${{ inputs.project-path }} dev 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}/pyproject.toml" ]; then
            pip install . 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log"
          else
            echo "No build configuration found. Skipping build step." 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log"
          fi
          if [ ! -f "${GITHUB_WORKSPACE}/logs/${repo_name}-${{ github.run_id }}-build.log" ]; then
            echo "ERROR : Log file for build was not created!" >&2
            exit 1
          else
            echo "SUCCESS : Log file for build was created!" >&2
          fi

      - name: Move wheel file to workspace
        run: |
          echo "GITHUB_WORKSPACE is: ${GITHUB_WORKSPACE}"
          echo "Searching for wheel files..."
          WHEEL_FILE=$(find /home/runner/.cache/pip/wheels/ -type f -name "*.whl")
          if [ -n "$WHEEL_FILE" ]; then
            echo "Wheel file found: $WHEEL_FILE"
            mkdir -p "${GITHUB_WORKSPACE}/dist"
            mv "$WHEEL_FILE" "${GITHUB_WORKSPACE}/dist/"
            if [ -f "${GITHUB_WORKSPACE}/dist/$(basename $WHEEL_FILE)" ]; then
              echo "SUCCESS: Wheel file moved to dist directory."
            else
              echo "ERROR: Failed to move the wheel file." >&2
              exit 1
            fi
          else
            echo "ERROR: No wheel file found!"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${repo_name}-${{ github.run_id }}
          path: ${{ github.workspace }}/dist/*.whl
          if-no-files-found: ignore

      - name: Debug Logs Directory
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing contents of the current directory:"
          ls -la
          echo "Listing contents of the GITHUB_WORKSPACE directory:"
          ls -la $GITHUB_WORKSPACE
          echo "Checking if the logs directory exists in the workspace:"
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            echo "Logs directory exists in the workspace."
            ls -la $GITHUB_WORKSPACE/logs
          else
            echo "ERROR: Logs directory does not exist in the workspace!"
          fi      
     
      # Paso para verificar si el nombre de la cuenta de almacenamiento está configurado
      - name: Debug Storage Account Name
        run: |
          echo "Checking if AZURE_STORAGE_ACCOUNT_NAME is set..."
          if [ -z "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" ]; then
            echo "ERROR: AZURE_STORAGE_ACCOUNT_NAME is not set." >&2
            exit 1
          else
            echo "Account Name: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
          fi

      - name: Verify Logs Directory
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ] && [ "$(ls -A $GITHUB_WORKSPACE/logs)" ]; then
            echo "Logs directory exists and contains files:"
            ls -la $GITHUB_WORKSPACE/logs
          else
            echo "ERROR: Logs directory is empty or does not exist!" >&2
            exit 1
          fi
      
      # Paso para subir los logs al contenedor de Azure Storage
      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in $GITHUB_WORKSPACE/logs/*.log; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                                    --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
                                    --container-name logs \
                                    --file "$log" \
                                    --name "$(basename $log)" \
                                    --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi

  # Job separado para formatear código y recopilar logs
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para análisis de código y recopilar logs
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para ejecutar Lint y recopilar logs
  python-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job para subir y analizar los logs de builds fallidas
  analyze_failed_logs:
    needs: [ci_pipeline, check-code-format, code-analysis, python-lint]
    runs-on: ubuntu-24.04
    if: failure()
    steps:
      - name: Download Logs Artifact
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: $GITHUB_WORKSPACE/logs

      - name: Analyze Failed Logs with OpenAI
        run: python scripts/analyze_logs.py --log-files "*.log" --analysis-type "error"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Job para analizar logs exitosos
  analyze_success_logs:
    needs: [ci_pipeline, check-code-format, code-analysis, python-lint]
    runs-on: ubuntu-24.04
    if: success()
    steps:
      - name: Download analyze_logs.py from library repo
        run: |
          echo "Cloning the devops-pipelines-ci-cd repository to obtain analyze_logs.py script..."
          git clone https://github.com/guillipa1993/devops-pipelines-ci-cd.git
          mkdir -p scripts
          cp devops-pipelines-ci-cd/scripts/analyze_logs.py scripts/
          if [ -f "scripts/analyze_logs.py" ]; then
            echo "SUCCESS: analyze_logs.py copied to scripts directory."
          else
            echo "ERROR: Failed to copy analyze_logs.py to scripts directory." >&2
            exit 1
          fi

      - name: Download All Logs Matching Pattern from Azure Storage
        run: |
          mkdir -p $GITHUB_WORKSPACE/logs
          REPO_NAME="${GITHUB_REPOSITORY##*/}" 
          RUN_ID="${{ github.run_id }}"
          LOG_NAME_PREFIX="${REPO_NAME}-${RUN_ID}-"
          az storage blob list \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
            --container-name logs \
            --query "[].{name:name}" -o tsv | grep "^${LOG_NAME_PREFIX}" > blob_list.txt
          if [ ! -s blob_list.txt ]; then
            echo "No logs found matching pattern: ${LOG_NAME_PREFIX}*.log"
            exit 1
          fi
          while IFS= read -r blob_name; do
            az storage blob download \
              --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
              --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
              --container-name logs \
              --name "$blob_name" \
              --file "$GITHUB_WORKSPACE/logs/$(basename $blob_name)"
          done < blob_list.txt
          if [ "$(ls -1 $GITHUB_WORKSPACE/logs | wc -l)" -eq 0 ]; then
            echo "ERROR: No log files were downloaded!" >&2
            exit 1
          fi
          ls -la $GITHUB_WORKSPACE/logs
        env:
          AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

      - name: Verify Logs Artifact
        run: |
          if [ ! -d "$GITHUB_WORKSPACE/logs" ]; then
            echo "ERROR: Logs directory does not exist after downloading artifact!" >&2
            exit 1
          fi
          echo "Logs directory exists. Listing contents:"
          ls -la $GITHUB_WORKSPACE/logs

      - name: Install OpenAI Python Library
        run: |
          pip install openai
          pip install --upgrade openai
          python -c "import openai; print('OpenAI library installed successfully')"        
        
      - name: Analyze Success Logs with OpenAI
        run: python scripts/analyze_logs.py --log-dir $GITHUB_WORKSPACE/logs
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  

  # Job para limpiar el entorno
  clean-up:
    needs: [analyze_failed_logs, analyze_success_logs]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
