name: "Python CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Python'
        required: true
        type: string
      requirements-path:
        description: 'La ruta del proyecto donde se encuentran los requisitos del proyecto Python'
        required: false
        type: string
      build-configuration:
        description: 'Configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      build-command:
        description: 'Comando personalizado para construir el proyecto'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto Python y recopilar logs
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: |
          echo "Running additional install commands"
          mkdir -p "${GITHUB_WORKSPACE}/logs"
          ${{ inputs.additional-install-commands }} 2>&1 | tee "${GITHUB_WORKSPACE}/logs/${{ github.repository }}-${{ github.run_id }}-additional_install.log"

      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          if [ -f "${{ inputs.requirements-path }}requirements.txt" ]; then
            pip install -r ${{ inputs.requirements-path }}requirements.txt 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-dependencies.log"
          elif [ -f "${{ inputs.project-path }}pyproject.toml" ]; then
            pip install . 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-dependencies.log"
          else
            echo "No requirements or pyproject.toml file found. Skipping dependency installation." 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-dependencies.log"

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          echo "Setting environment variables"
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: |
          echo "Building project"
          if [ -n "${{ inputs.build-command }}" ]; then
            echo "Using custom build command"
            ${{ inputs.build-command }} 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}/setup.py" ]; then
            python ${{ inputs.project-path }}/setup.py build 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}/Makefile" ]; then
            make -C ${{ inputs.project-path }} dev 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build.log"
          elif [ -f "${{ inputs.project-path }}pyproject.toml" ]; then
            pip install . 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build.log"
          else
            echo "No build configuration found. Skipping build step." 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build.log"

  # Job separado para formatear código y recopilar logs
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Check Code Format
        run: ./scripts/check_code_format.sh 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-check_code_format.log"

  # Job separado para análisis de código y recopilar logs
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Code Analysis
        run: ./scripts/code_analysis.sh 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-code_analysis.log"

  # Job separado para generar artefacto de build y recopilar logs
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    runs-on: ubuntu-latest
    steps:
      - name: Build Artifact
        run: ./scripts/build_artifact.sh 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-build_artifact.log"

  # Job separado para ejecutar Lint y recopilar logs
  python-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Lint
        run: ./scripts/run_lint.sh 2>&1 | tee "${{ github.repository }}-${{ github.run_id }}-lint.log"

  # Job para subir y analizar los logs de builds fallidas
  analyze_failed_logs:
    needs: [ci_pipeline, check-code-format, code-analysis, build-artifact, python-lint]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Upload Logs to Azure Storage
        run: |
          for log in *.log; do
            az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} --container-name logs --file $log --name "$log"
          done

      - name: Analyze Failed Logs with OpenAI
        run: python scripts/analyze_logs.py --log-files "*.log" --analysis-type "error"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Job para subir y analizar los logs de builds exitosas
  analyze_success_logs:
    needs: [ci_pipeline, check-code-format, code-analysis, build-artifact, python-lint]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Upload Logs to Azure Storage
        run: |
          for log in *.log; do
            az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} --container-name logs --file $log --name "$log"
          done

      - name: Analyze Success Logs with OpenAI
        run: python scripts/analyze_logs.py --log-files "*.log" --analysis-type "improvement"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Job separado para la limpieza
  clean-up:
    needs: [analyze_failed_logs, analyze_success_logs]
    if: ${{ inputs.run-clean-up }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Clean-Up
        run: ./scripts/clean_up.sh

