name: "Python CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Python'
        required: true
        type: string
      requirements-path:
        description: 'La ruta del proyecto donde se encuentran los requisitos del proyecto Python'
        required: true
        type: string
      build-configuration:
        description: 'Configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      build-command:
        description: 'Comando personalizado para construir el proyecto'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto Python
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: ${{ inputs.additional-install-commands }}

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.requirements-path }}/requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt"
            pip install -r ${{ inputs.requirements-path }}/requirements.txt
          elif [ -f "${{ inputs.project-path }}/pyproject.toml" ]; then
            echo "Installing dependencies from pyproject.toml"
            pip install .
          else
            echo "No requirements or pyproject.toml file found. Skipping dependency installation."
          fi

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: |
          if [ -n "${{ inputs.build-command }}" ]; then
            echo "Using custom build command"
            ${{ inputs.build-command }}
          elif [ -f "${{ inputs.project-path }}/setup.py" ]; then
            echo "Building with setup.py"
            python ${{ inputs.project-path }}/setup.py build
          elif [ -f "${{ inputs.project-path }}/Makefile" ]; then
            echo "Building with Makefile"
            make -C ${{ inputs.project-path }} dev
          elif [ -f "${{ inputs.project-path }}/pyproject.toml" ]; then
            echo "Building with pyproject.toml"
            pip install .
          else
            echo "No build configuration found. Skipping build step."
          fi

  # Job separado para formatear código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
      project-path: ${{ inputs.project-path }}
      requirements-path: ${{ inputs.requirements-path }}

  # Job separado para ejecutar Lint
  python-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, python-lint]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
