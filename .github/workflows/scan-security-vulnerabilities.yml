name: "Scan Security Vulnerabilities"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for vulnerability scanning'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Java'
        required: true
        type: string
      azure-account-name:
        description: 'Azure Storage Account Name'
        required: true
        type: string
      azure-account-key:
        description: 'Azure Storage Account Key'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  scan-security-vulnerabilities:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: "${{ inputs.java-version }}"

      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Install Nancy
        if: ${{ inputs.language == 'go' }}
        run: |
          NANCY_VERSION=$(curl --silent "https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Nancy version $NANCY_VERSION"
          curl -Lo nancy https://github.com/sonatype-nexus-community/nancy/releases/download/$NANCY_VERSION/nancy-$NANCY_VERSION-linux-amd64
          file nancy  
          chmod +x nancy
          sudo mv nancy /usr/local/bin/nancy
          echo "Nancy installed successfully"
        
      - name: Check Nancy installation
        if: ${{ inputs.language == 'go' }}
        run: nancy --version

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      
      - name: Install Bandit for Python Security Scan
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          pip install bandit

      - name: Set Java Environment Variables
        if: ${{ inputs.language == 'java' }}
        run: |
          export JUNIT_JUPITER_VERSION=5.7.1
          export JUNIT_PLATFORM_VERSION=1.7.1
          echo "JUNIT_JUPITER_VERSION and JUNIT_PLATFORM_VERSION set."          
      
      - name: Scan for Vulnerabilities
        run: |
          # Crear la carpeta de logs si no existe
          mkdir -p "$GITHUB_WORKSPACE/logs"
      
          # Generar nombre base para los logs
          log_name="${{ github.repository }}-${{ github.run_id }}"
      
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi
      
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Scanning Go modules for vulnerabilities"
            go list -m all | nancy sleuth > "$GITHUB_WORKSPACE/logs/${log_name}-go-vulnerabilities.log" 2>&1 || true
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Running npm audit for Node.js"
            npm audit --production > "$GITHUB_WORKSPACE/logs/${log_name}-node-vulnerabilities.log" 2>&1 || true
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Running bandit scan for Python"
            bandit -r . -o bandit_output.json -f json > "$GITHUB_WORKSPACE/logs/${log_name}-python-vulnerabilities.log" 2>&1 || true
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Running OWASP Dependency Check for Java"
            find "${{ inputs.project-path }}" -name "pom.xml" ! -path "*/test/*" ! -path "*/src/test/*" ! -path "*/multi-release-jar/*" | while read -r pom_path; do
              project_dir=$(dirname "$pom_path")
              echo "Running dependency check in $project_dir"
              if [ -f "$project_dir/mvnw" ]; then
                chmod +x "$project_dir/mvnw"
                "$project_dir/mvnw" -f "$pom_path" org.owasp:dependency-check-maven:check >> "$GITHUB_WORKSPACE/logs/${log_name}-java-vulnerabilities.log" 2>&1 || true
              else
                mvn -f "$pom_path" org.owasp:dependency-check-maven:check >> "$GITHUB_WORKSPACE/logs/${log_name}-java-vulnerabilities.log" 2>&1 || true
              fi
            done
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 5 ]; then
              echo "Using 'dotnet list package --outdated' since '--vulnerable' is not available in versions less than .NET 5"
              dotnet list package --outdated > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-vulnerabilities.log" 2>&1 || true
            else
              echo "Scanning .NET packages for vulnerabilities"
              dotnet list package --vulnerable > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-vulnerabilities.log" 2>&1 || true
            fi
          fi
        continue-on-error: true       

      - name: Process Bandit Results
        if: ${{ inputs.language == 'python' }}
        run: |
          echo "Processing Bandit results..."
          CRITICAL_ISSUES=$(jq '.results[]' bandit_output.json)
          if [ -n "$CRITICAL_ISSUES" ]; then
            echo "Critical security issues found:"
            echo "$CRITICAL_ISSUES"
          else
            echo "No critical security issues found."
          fi
        continue-on-error: true

      - name: Process Bandit HIGH severity Results
        if: ${{ inputs.language == 'python' }}
        run: |
          echo "Processing Bandit results..."
          CRITICAL_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit_output.json)
          if [ -n "$CRITICAL_ISSUES" ]; then
            echo "Critical security issues found:"
            echo "$CRITICAL_ISSUES"
          else
            echo "No critical security issues found."
          fi
        continue-on-error: true

      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in $GITHUB_WORKSPACE/logs/*.log; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ inputs.azure-account-name }}" --account-key "${{ inputs.azure-account-key }}" --container-name logs --file "$log" --name "$(basename $log)" --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi
