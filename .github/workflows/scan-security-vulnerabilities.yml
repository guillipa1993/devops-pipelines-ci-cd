name: "Scan Security Vulnerabilities"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: 'Azure Storage Account Name'
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: 'Azure Storage Account Key'
        required: true
    inputs:
      language:
        description: 'The programming language for vulnerability scanning'
        required: true
        type: string
      project-path:
        description: 'The project path containing the code to scan'
        required: true
        type: string
      dotnet-version:
        description: 'The .NET version to use for the pipeline'
        required: false
        type: string
      go-version:
        description: 'The Go version to use for the pipeline'
        required: false
        type: string
      python-version:
        description: 'The Python version to use for the pipeline'
        required: false
        type: string
      java-version:
        description: 'The Java version to use for the pipeline'
        required: false
        type: string

jobs:
  scan-security-vulnerabilities:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: "${{ inputs.java-version }}"

      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Install Nancy for Go
        if: ${{ inputs.language == 'go' }}
        run: |
          NANCY_VERSION=$(curl --silent "https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Nancy version $NANCY_VERSION"
          curl -Lo nancy https://github.com/sonatype-nexus-community/nancy/releases/download/$NANCY_VERSION/nancy-$NANCY_VERSION-linux-amd64
          file nancy  
          chmod +x nancy
          sudo mv nancy /usr/local/bin/nancy
          nancy --version

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      
      - name: Install Bandit for Python Security Scan
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Installing Bandit..."
          pip install bandit
          bandit --version

      - name: Set Java Environment Variables
        if: ${{ inputs.language == 'java' }}
        run: |
          export JUNIT_JUPITER_VERSION=5.7.1
          export JUNIT_PLATFORM_VERSION=1.7.1
          echo "Java environment variables set."

      - name: Scan for Vulnerabilities
        run: |
          mkdir -p "$GITHUB_WORKSPACE/logs"
          repo_name="${GITHUB_REPOSITORY##*/}"
          log_name="${repo_name}-${GITHUB_RUN_ID}"

          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
            echo "Changed to project directory: ${{ inputs.project-path }}"
          fi

          case "${{ inputs.language }}" in
            go)
              echo "Scanning Go modules for vulnerabilities"
              go list -m all | nancy sleuth > "$GITHUB_WORKSPACE/logs/${log_name}-go-vulnerabilities.log" 2>&1 || true
              ;;
            node)
              echo "Running npm audit for Node.js"
              npm audit --production > "$GITHUB_WORKSPACE/logs/${log_name}-node-vulnerabilities.log" 2>&1 || true
              ;;
            python)
              echo "Listing Python files for Bandit analysis:"
              find . -name "*.py"
              echo "Running Bandit scan for Python"
              bandit -r . -o "$GITHUB_WORKSPACE/logs/${log_name}-bandit-output.json" -f json | tee "$GITHUB_WORKSPACE/logs/${log_name}-python-vulnerabilities.log" || true

              # Convertir el JSON a formato log
              if [ -f "$GITHUB_WORKSPACE/logs/${log_name}-bandit-output.json" ]; then
                echo "Converting JSON output to log format"
                jq -r '.results[] | "Filename: \(.filename)\nIssue: \(.issue_text)\nSeverity: \(.severity)\nLine: \(.line_number)\n---"' \
                  "$GITHUB_WORKSPACE/logs/${log_name}-bandit-output.json" > "$GITHUB_WORKSPACE/logs/${log_name}-bandit-converted.log"

                echo "Bandit output JSON file converted to LOG format successfully."
              else
                echo "ERROR: Bandit output JSON file not created!" >&2
                exit 1
              fi
              ;;
            java)
              echo "Running OWASP Dependency Check for Java"
              find "${{ inputs.project-path }}" -name "pom.xml" | while read -r pom_path; do
                project_dir=$(dirname "$pom_path")
                echo "Running dependency check in $project_dir"
                if [ -f "$project_dir/mvnw" ]; then
                  chmod +x "$project_dir/mvnw"
                  "$project_dir/mvnw" -f "$pom_path" org.owasp:dependency-check-maven:check >> "$GITHUB_WORKSPACE/logs/${log_name}-java-vulnerabilities.log" 2>&1 || true
                else
                  mvn -f "$pom_path" org.owasp:dependency-check-maven:check >> "$GITHUB_WORKSPACE/logs/${log_name}-java-vulnerabilities.log" 2>&1 || true
                fi
              done
              ;;
            dotnet)
              version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
              if [ "$version" -lt 5 ]; then
                echo "Using 'dotnet list package --outdated'"
                dotnet list package --outdated > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-vulnerabilities.log" 2>&1 || true
              else
                echo "Scanning .NET packages for vulnerabilities"
                dotnet list package --vulnerable > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-vulnerabilities.log" 2>&1 || true
              fi
              ;;
            *)
              echo "Unsupported language: ${{ inputs.language }}" > "$GITHUB_WORKSPACE/logs/${log_name}-unsupported-language.log"
              ;;
          esac

          # Listar logs generados
          echo "Generated logs:"
          ls -la "$GITHUB_WORKSPACE/logs/"
        continue-on-error: true

      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in $GITHUB_WORKSPACE/logs/*; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                                     --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
                                     --container-name logs \
                                     --file "$log" \
                                     --name "$(basename "$log")" \
                                     --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi
        continue-on-error: true
