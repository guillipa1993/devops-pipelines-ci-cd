name: "Generate Coverage Report"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for generating the coverage report'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      node-version:
        description: 'La versión de Node.js para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  generate-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Crear carpeta de logs
      - name: Prepare Logs Directory
        run: mkdir -p "${GITHUB_WORKSPACE}/logs"

      # Setup y generar cobertura para Go
      - name: Generate Coverage Report for Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        run: |
          echo "Setting up Go and generating coverage report" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-go-coverage.log"
          go test -coverprofile=coverage.out ./... 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-go-coverage.log"

      # Setup y generar cobertura para Node.js
      - name: Generate Coverage Report for Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        run: |
          echo "Setting up Node.js and generating coverage report" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-node-coverage.log"
          npm install 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-node-coverage.log"
          npm run coverage 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-node-coverage.log"

      # Setup y generar cobertura para Python
      - name: Generate Coverage Report for Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Setting up Python and generating coverage report" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-python-coverage.log"
          pip install pytest pytest-cov 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-python-coverage.log"
          pytest --cov=. 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-python-coverage.log"

      # Setup y generar cobertura para .NET
      - name: Generate Coverage Report for .NET
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        run: |
          echo "Setting up .NET and generating coverage report" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-dotnet-coverage.log"
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-dotnet-coverage.log"

      # Setup y generar cobertura para Java
      - name: Generate Coverage Report for Java
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        run: |
          echo "Setting up Java and generating coverage report" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-coverage.log"
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
            ./mvnw jacoco:report 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-coverage.log"
          else
            echo "Maven wrapper not found. Skipping coverage report." | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-coverage.log"
          fi

      # Subir reporte de cobertura a Codecov
      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: |
            ${{ inputs.language == 'go' && 'coverage.out' || 
               inputs.language == 'node' && './coverage/lcov.info' || 
               inputs.language == 'python' && './coverage.xml' || 
               inputs.language == 'java' && './target/site/jacoco/jacoco.xml' || 
               inputs.language == 'dotnet' && './TestResults/opencover.xml' }}
          flags: ${{ inputs.language }}

      # Subir logs a Azure Storage
      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "${GITHUB_WORKSPACE}/logs" ]; then
            for log in ${GITHUB_WORKSPACE}/logs/*.log; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                                    --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
                                    --container-name logs \
                                    --file "$log" \
                                    --name "$(basename $log)" \
                                    --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi
