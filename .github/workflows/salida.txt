Archivo: build-artifact.yml
name: "Build Artifact"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for building the artifact'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código'
        required: false  
        type: string
      requirements-path:
        description: 'La ruta del proyecto donde se encuentran los requisitos'
        required: false  
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Set up Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: "${{ inputs.go-version }}"

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Build Artifact
        run: |
          # Cambiar al directorio especificado en `project-path` si se ha proporcionado
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi

          # Condiciones de construcción basadas en el lenguaje
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Building Go artifact"
            go build -o output/app
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Building Node.js artifact"
            npm run build
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Building Python artifact with pyproject.toml or requirements.txt"
            if [ -f "pyproject.toml" ]; then
              pip install .
            elif [ -f "${{ inputs.requirements-path }}requirements.txt" ]; then
              pip install -r "${{ inputs.requirements-path }}requirements.txt"
            elif [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            else
              echo "No build configuration found. Missing pyproject.toml or requirements.txt. Skipping build step."
            fi
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Building Java artifact"
            if [ -f "./mvnw" ]; then
              ./mvnw package
            elif [ -f "./gradlew" ]; then
              chmod +x ./gradlew
              ./gradlew build
            else
              echo "No build tool found (Maven or Gradle). Skipping Java build step."
            fi
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            echo "Building .NET artifact"
            dotnet publish -c Release -o ./publish
          fi

Archivo: check-code-format.yml
name: "Check Code Format"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for the code format check'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Java'
        required: false
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      node-version:
        description: 'La versión de Node.js para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  check-code-format:
    runs-on: ubuntu-latest
    steps:
      # Realizar el checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # Instalar .NET si el lenguaje es 'dotnet' y hay una versión especificada
      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      # Instalar Node.js si el lenguaje es 'node' y hay una versión especificada
      - name: Set up Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: "${{ inputs.node-version }}"

      # Instalar Black si el lenguaje es Python
      - name: Install Black for Python
        if: ${{ inputs.language == 'python' }}
        run: pip install black

      # Ejecutar el formateo de código basado en el lenguaje
      - name: Run Code Formatter
        run: |
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Running Go formatter"
            gofmt -l .
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Running Prettier for Node.js"
            npx prettier --check .
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Installing and running Black for Python"
            black --check . || true 
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Running Gradle formatter for Java"
            if [ -f "${{ inputs.project-path }}/gradlew" ]; then
              chmod +x "${{ inputs.project-path }}/gradlew"
              "${{ inputs.project-path }}/gradlew" -p "${{ inputs.project-path }}" format || true
            else
              echo "Gradle wrapper (gradlew) not found in project path. Skipping Java code format check."
            fi
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 3 ]; then
              echo "Skipping dotnet format: version is less than 3. Your version: ${{ inputs.dotnet-version }}"
            else
              echo "Running dotnet format"
              dotnet format
            fi
          fi

Archivo: clean-up.yml
name: "Clean Up"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for the clean-up process'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  clean-up:
    runs-on: ubuntu-latest
    steps:
      # Realizar el checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # Instalar .NET si el lenguaje es 'dotnet' y hay una versión especificada
      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      # Instalar Go si el lenguaje es 'go' y hay una versión especificada
      - name: Set up Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: "${{ inputs.go-version }}"

      # Instalar Python si el lenguaje es 'python' y hay una versión especificada
      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"

      # Proceso de limpieza basado en el lenguaje
      - name: Clean Up Build Artifacts
        run: |
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Cleaning up Go build artifacts"
            rm -rf ./bin ./build
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Cleaning up Node.js build artifacts"
            rm -rf ./dist ./build
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Cleaning up Python build artifacts"
            rm -rf ./dist ./build ./__pycache__ ./*.egg-info
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Cleaning up Java build artifacts"
            find . -name "pom.xml" ! -path "*/test/*" ! -path "*/src/test/*" | while read -r pom_path; do
              project_dir=$(dirname "$pom_path")
              echo "Running Maven clean in $project_dir"
              if [ -f "$project_dir/mvnw" ]; then
                (cd "$project_dir" && ./mvnw clean)
              else
                (cd "$project_dir" && mvn clean)
              fi
            done
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            echo "Cleaning up .NET build artifacts"
            rm -rf ./publish ./TestResults
          fi

Archivo: dotnet-ci.yml
name: "ASP.NET Core CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentran los archivos .csproj'
        required: true
        type: string
      build-configuration:
        description: 'La configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: ${{ inputs.additional-install-commands }}

      - name: Install dependencies
        run: dotnet restore ${{ inputs.project-path }}

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: |
          if [ "${{ inputs.build-configuration }}" != "" ]; then
            dotnet build ${{ inputs.project-path }} --configuration ${{ inputs.build-configuration }}
          else
            dotnet build ${{ inputs.project-path }}
          fi

  # Job separado para formatear código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      dotnet-version: ${{ inputs.dotnet-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      dotnet-version: ${{ inputs.dotnet-version }} 
      project-path: ${{ inputs.project-path }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      dotnet-version: ${{ inputs.dotnet-version }} 
      project-path: ${{ inputs.project-path }}

  # Job separado para ejecutar YAML Lint
  dotnet-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, dotnet-lint]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      dotnet-version: ${{ inputs.dotnet-version }} 

Archivo: generate-coverage.yml
name: "Generate Coverage Report"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for generating the coverage report'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      node-version:
        description: 'La versión de Node.js para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  generate-coverage:
    runs-on: ubuntu-latest
    steps:
      # Realizar el checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # Instalar .NET si el lenguaje es 'dotnet' y hay una versión especificada
      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      # Instalar Node.js si el lenguaje es 'node' y hay una versión especificada
      - name: Set up Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: "${{ inputs.node-version }}" # Especifica la versión de Node.js si es necesario

      # Instalar Go si el lenguaje es 'go' y hay una versión especificada
      - name: Set up Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: "${{ inputs.go-version }}"

      # Instalar Python si el lenguaje es 'python' y hay una versión especificada
      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"

      # Generar el reporte de cobertura basado en el lenguaje
      - name: Generate Coverage Report
        run: |
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Generating coverage report for Go"
            go test -coverprofile=coverage.out ./...
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Generating coverage report for Node.js"
            npm run coverage
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Generating coverage report for Python"
            pytest --cov=.
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Generating coverage report for Java"
            ./mvnw jacoco:report
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            echo "Generating coverage report for .NET"
            dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          fi

Archivo: go-ci.yml
name: "Go CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Go'
        required: true
        type: string
      build-configuration:
        description: 'Configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto Go
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ inputs.go-version }}

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: ${{ inputs.additional-install-commands }}

      - name: Install dependencies
        run: go mod tidy

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: go build -o output/app ${{ inputs.project-path }}

  # Job separado para formatear código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      go-version: ${{ inputs.go-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      go-version: ${{ inputs.go-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      go-version: ${{ inputs.go-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para ejecutar Lint
  go-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}
      go-version: ${{ inputs.go-version }}

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, go-lint]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      go-version: ${{ inputs.go-version }}

Archivo: java-ci.yml
name: "Java CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Java'
        required: true
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string
      debug-mode:
        description: 'Habilitar modo de depuración para la build'
        required: false
        type: boolean

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java-version }}

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build with Gradle
        run: |
          if [ -n "${{ inputs.project-path }}" ]; then
            if [ "${{ inputs.debug-mode }}" = "true" ]; then
            echo "Estoy en 1"  
            ./gradlew -p "${{ inputs.project-path }}" build --stacktrace --info --warning-mode all
            elif  [ "${{ inputs.run-tests }}" = "false" ]; then
              echo "Estoy en 2"  
              ./gradlew -p "${{ inputs.project-path }}" build -x test
            else
              echo "Estoy en 3"  
              ./gradlew -p "${{ inputs.project-path }}" build
            fi
          else
            if [ "${{ inputs.debug-mode }}" = "true" ]; then
              echo "Estoy en 4"  
              ./gradlew build --stacktrace --info --warning-mode all
            elif  [ "${{ inputs.run-tests }}" = "false" ]; then
              echo "Estoy en 5"  
              ./gradlew build -x test
            else
              echo "Estoy en 6"  
              ./gradlew build
            fi
          fi

  # Job separado para formateo de código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para ejecutar Lint
  java-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}

  # Job para ejecutar las pruebas
  run-tests:
    needs: ci_pipeline
    if: ${{ inputs.run-tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java-version }}
      
      - name: Build Java artifact
        run: |
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi
          echo "Building Java artifact"
          if [ -f "./mvnw" ]; then
            ./mvnw package
          elif [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew build
          else
            echo "No build tool found (Maven or Gradle). Skipping Java build step."
          fi

      - name: Run tests
        run: |
          if [ -n "${{ inputs.project-path }}" ] && [ -f "${{ inputs.project-path }}/build.gradle" ]; then
            echo "Running tests in specified project path: ${{ inputs.project-path }}"
            ./gradlew -p "${{ inputs.project-path }}" test
          else
            echo "No valid project path specified or build.gradle not found. Running tests in the root directory."
            ./gradlew test
          fi

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, java-lint, run-tests]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}

Archivo: lint.yml
name: "Lint Code"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for linting'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  run-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Ejecutar el linter de Go
      - name: Run Go Linter
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        run: |
          echo "Running Go formatter"
          gofmt -l .

      # Ejecutar el linter de Node.js
      - name: Run Node.js Linter
        if: ${{ inputs.language == 'node' }}
        run: |
          echo "Running Prettier for Node.js"
          npm install --global prettier
          prettier --check .

      # Ejecutar el linter de Python
      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      
      - name: Install Python Linter
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          pip install flake8
      
      - name: Run Python Linter and Save Results
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Running Python linter (flake8) and saving results"
          flake8 . > flake8_report.txt || true

      - name: Analyze flake8 Results
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Analyzing flake8 results"
          if [ -s flake8_report.txt ]; then
            echo "Found issues in flake8 report:"
            cat flake8_report.txt
            # Opcionalmente, contar el número de problemas
            issue_count=$(wc -l < flake8_report.txt)
            echo "$issue_count issues found."
            # Agregar una condición en función del número de problemas
            if [ "$issue_count" -gt 100 ]; then
              echo "Too many issues ($issue_count) found in the codebase. Please review."
            fi
          else
            echo "No issues found by flake8."
          fi
        continue-on-error: true 

      # Ejecutar el linter de .NET
      - name: Run .NET Linter
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          if [ -z "${{ inputs.dotnet-version }}" ]; then
            echo "No .NET version provided. Skipping .NET format check."
          else
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 3 ]; then
              echo "Skipping .NET format: version is less than 3. Using 'dotnet build' instead."
              dotnet build --nologo --no-restore --verbosity=minimal
            else
              echo "Running .NET linter (dotnet format)"
              dotnet format --verify-no-changes
            fi
          fi
        continue-on-error: true 

      # Ejecutar el linter de Java
      - name: Set up Java
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: "${{ inputs.java-version }}"
          distribution: 'temurin'

      - name: Run Java Checkstyle
        if: ${{ inputs.language == 'java' }}
        run: |
          echo "Running Checkstyle for Java"
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew checkstyleMain || true
          else
            echo "Gradle wrapper not found. Skipping Java linter."
          fi
        continue-on-error: true

Archivo: nodejs-ci.yml
name: "Node.js - CI Pipeline"

on:
  workflow_call:
    inputs:
      node-version:
        description: 'La versión de Node.js para usar en este pipeline'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  notify:
    uses: ./.github/workflows/reusable/shared-methods.yml#send-notification
Archivo: php-ci.yml
name: "PHP CI Pipeline"

on:
  workflow_call:
    inputs:
      php-version:
        description: 'La versión de PHP para usar en este pipeline'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}

      - name: Install dependencies
        run: composer install

      - name: Run tests
        run: vendor/bin/phpunit

  notify:
    uses: ./.github/workflows/reusable/shared-methods.yml#send-notification
Archivo: python-ci.yml
name: "Python CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Python'
        required: true
        type: string
      requirements-path:
        description: 'La ruta del proyecto donde se encuentran los requisitos del proyecto Python'
        required: false
        type: string
      build-configuration:
        description: 'Configuración de build (Debug o Release)'
        required: true
        type: string
      additional-install-commands:
        description: 'Comandos adicionales para instalar dependencias antes de construir'
        required: false
        type: string
      build-command:
        description: 'Comando personalizado para construir el proyecto'
        required: false
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string

jobs:
  # Job principal para construir el proyecto Python
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install additional dependencies
        if: ${{ inputs.additional-install-commands }}
        run: ${{ inputs.additional-install-commands }}

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.requirements-path }}requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt"
            pip install -r ${{ inputs.requirements-path }}requirements.txt
          elif [ -f "${{ inputs.project-path }}pyproject.toml" ]; then
            echo "Installing dependencies from pyproject.toml"
            pip install .
          else
            echo "No requirements or pyproject.toml file found. Skipping dependency installation."
          fi

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build
        run: |
          if [ -n "${{ inputs.build-command }}" ]; then
            echo "Using custom build command"
            ${{ inputs.build-command }}
          elif [ -f "${{ inputs.project-path }}/setup.py" ]; then
            echo "Building with setup.py"
            python ${{ inputs.project-path }}/setup.py build
          elif [ -f "${{ inputs.project-path }}/Makefile" ]; then
            echo "Building with Makefile"
            make -C ${{ inputs.project-path }} dev
          elif [ -f "${{ inputs.project-path }}pyproject.toml" ]; then
            echo "Building with pyproject.toml"
            pip install .
          else
            echo "No build configuration found. Skipping build step."
          fi

  # Job separado para formatear código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}
      project-path: ${{ inputs.project-path }}
      requirements-path: ${{ inputs.requirements-path }}

  # Job separado para ejecutar Lint
  python-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, python-lint]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      python-version: ${{ inputs.python-version }}

Archivo: ruby-ci.yml
name: "Ruby CI Pipeline"

on:
  workflow_call:
    inputs:
      ruby-version:
        description: 'La versión de Ruby para usar en este pipeline'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}

      - name: Install dependencies
        run: bundle install

      - name: Run tests
        run: bundle exec rspec

  notify:
    uses: ./.github/workflows/reusable/shared-methods.yml#send-notification
Archivo: scan-security-vulnerabilities.yml
name: "Scan Security Vulnerabilities"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for vulnerability scanning'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Java'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  scan-security-vulnerabilities:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: "${{ inputs.java-version }}"

      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Install Nancy
        if: ${{ inputs.language == 'go' }}
        run: |
          NANCY_VERSION=$(curl --silent "https://api.github.com/repos/sonatype-nexus-community/nancy/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Nancy version $NANCY_VERSION"
          curl -Lo nancy https://github.com/sonatype-nexus-community/nancy/releases/download/$NANCY_VERSION/nancy-$NANCY_VERSION-linux-amd64
          file nancy  
          chmod +x nancy
          sudo mv nancy /usr/local/bin/nancy
          echo "Nancy installed successfully"
        
      - name: Check Nancy installation
        if: ${{ inputs.language == 'go' }}
        run: nancy --version

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      
      - name: Install Bandit for Python Security Scan
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          pip install bandit

      - name: Set Java Environment Variables
        if: ${{ inputs.language == 'java' }}
        run: |
          export JUNIT_JUPITER_VERSION=5.7.1
          export JUNIT_PLATFORM_VERSION=1.7.1
          echo "JUNIT_JUPITER_VERSION and JUNIT_PLATFORM_VERSION set."          
      
      - name: Scan for Vulnerabilities
        run: |
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi

          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Scanning Go modules for vulnerabilities"
            go list -m all | nancy sleuth
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Running npm audit for Node.js"
            npm audit --production
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Running bandit scan for Python"
            bandit -r . -o bandit_output.json -f json || true
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Running OWASP Dependency Check for Java"
            find "${{ inputs.project-path }}" -name "pom.xml" ! -path "*/test/*" ! -path "*/src/test/*" ! -path "*/multi-release-jar/*" | while read -r pom_path; do
              project_dir=$(dirname "$pom_path")
              echo "Running dependency check in $project_dir"
              if [ -f "$project_dir/mvnw" ]; then
                chmod +x "$project_dir/mvnw"
                "$project_dir/mvnw" -f "$pom_path" org.owasp:dependency-check-maven:check
              else
                mvn -f "$pom_path" org.owasp:dependency-check-maven:check
              fi
            done
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 5 ]; then
              echo "Using 'dotnet list package --outdated' since '--vulnerable' is not available in versions less than .NET 5"
              dotnet list package --outdated
            else
              echo "Scanning .NET packages for vulnerabilities"
              dotnet list package --vulnerable
            fi
          fi
        continue-on-error: true

      - name: Process Bandit Results
        if: ${{ inputs.language == 'python' }}
        run: |
          echo "Processing Bandit results..."
          CRITICAL_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit_output.json)
          if [ -n "$CRITICAL_ISSUES" ]; then
            echo "Critical security issues found:"
            echo "$CRITICAL_ISSUES"
          else
            echo "No critical security issues found."
          fi
        continue-on-error: true

Archivo: simulate-ci.yml
name: "Simulate CI Pipeline"

on:
  workflow_call:
    inputs:
      simulate-message:
        description: 'Mensaje para simular las etapas del pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje del proyecto'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Simulación de instalación de dependencias
      - name: Simulate Install
        run: |
          echo "${{ inputs.simulate-message }}: Instalación de dependencias simulada para ${{ inputs.language }}."

      # Simulación de ejecución de tests
      - name: Simulate Test
        run: |
          echo "${{ inputs.simulate-message }}: Ejecución de tests simulada para ${{ inputs.language }}."

      # Simulación de verificación de versión específica para cada lenguaje
      - name: Simulate Display Version
        run: |
          if [ "${{ inputs.language }}" == "dotnet" ]; then
            if command -v dotnet &> /dev/null; then
              dotnet --version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de .NET."
            fi
          elif [ "${{ inputs.language }}" == "go" ]; then
            if command -v go &> /dev/null; then
              go version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de Go."
            fi
          elif [ "${{ inputs.language }}" == "java" ]; then
            if command -v java &> /dev/null; then
              java -version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de Java."
            fi
          elif [ "${{ inputs.language }}" == "nodejs" ]; then
            if command -v node &> /dev/null; then
              node --version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de Node.js."
            fi
          elif [ "${{ inputs.language }}" == "php" ]; then
            if command -v php &> /dev/null; then
              php --version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de PHP."
            fi
          elif [ "${{ inputs.language }}" == "python" ]; then
            if command -v python3 &> /dev/null; then
              python3 --version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de Python."
            fi
          elif [ "${{ inputs.language }}" == "ruby" ]; then
            if command -v ruby &> /dev/null; then
              ruby --version
            else
              echo "${{ inputs.simulate-message }}: Simulación de versión de Ruby."
            fi
          else
            echo "${{ inputs.simulate-message }}: Lenguaje no soportado en esta simulación."
          fi

Archivo: upload-coverage-report.yml
name: "Upload Coverage Report"

on:
  workflow_call:
    inputs:
      language:
        description: 'The programming language for uploading the coverage report'
        required: true
        type: string

jobs:
  upload-coverage-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v2
        with:
          file: |
            ${{ inputs.language == 'go' && 'coverage.out' || 
               inputs.language == 'node' && './coverage/lcov.info' || 
               inputs.language == 'python' && './coverage.xml' || 
               inputs.language == 'java' && './target/site/jacoco/jacoco.xml' || 
               inputs.language == 'dotnet' && './TestResults/opencover.xml' }}
          flags: ${{ inputs.language }}

