name: "Java CI/CD Pipeline"

on:
  workflow_call:
    inputs:
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: true
        type: string
      language:
        description: 'El lenguaje de programación para usar en este pipeline'
        required: true
        type: string
      project-path:
        description: 'La ruta del proyecto donde se encuentra el código Java'
        required: true
        type: string
      run-tests:
        description: 'Ejecutar las pruebas del proyecto'
        required: true
        type: boolean
      run-check-code-format:
        description: 'Ejecutar la verificación del formato del código'
        required: true
        type: boolean
      run-code-analysis:
        description: 'Ejecutar el análisis de código'
        required: true
        type: boolean
      run-build-artifact:
        description: 'Generar el artefacto de build'
        required: true
        type: boolean
      run-upload-coverage:
        description: 'Subir el reporte de cobertura'
        required: true
        type: boolean
      run-lint:
        description: 'Ejecutar Lint'
        required: true
        type: boolean
      run-clean-up:
        description: 'Ejecutar limpieza después de la ejecución'
        required: true
        type: boolean
      environment-variables:
        description: 'Variables de entorno para configurar en el pipeline (formato: "VAR1=value1, VAR2=value2")'
        required: false
        type: string
      debug-mode:
        description: 'Habilitar modo de depuración para la build'
        required: false
        type: boolean

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java-version }}

      - name: Set Environment Variables
        if: ${{ inputs.environment-variables }}
        run: |
          IFS=',' read -ra VARS <<< "${{ inputs.environment-variables }}"
          for VAR in "${VARS[@]}"; do
            echo "Setting $VAR"
            echo "$VAR" >> $GITHUB_ENV
          done

      - name: Build with Gradle
        run: |
          if [ -n "${{ inputs.project-path }}" ]; then
            if [ "${{ inputs.debug-mode }}" = "true" ]; then
              ./gradlew -p "${{ inputs.project-path }}" build --stacktrace --info --warning-mode all
            else
              ./gradlew -p "${{ inputs.project-path }}" build
            fi
          else
            if [ "${{ inputs.debug-mode }}" = "true" ]; then
              ./gradlew build --stacktrace --info --warning-mode all
            else
              ./gradlew build
            fi
          fi

  # Job separado para formateo de código
  check-code-format:
    needs: ci_pipeline
    if: ${{ inputs.run-check-code-format }}
    uses: ./.github/workflows/check-code-format.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}

  # Job separado para análisis de código
  code-analysis:
    needs: ci_pipeline
    if: ${{ inputs.run-code-analysis }}
    uses: ./.github/workflows/scan-security-vulnerabilities.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para generar artefacto de build
  build-artifact:
    needs: ci_pipeline
    if: ${{ inputs.run-build-artifact }}
    uses: ./.github/workflows/build-artifact.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}
      project-path: ${{ inputs.project-path }}

  # Job separado para ejecutar Lint
  java-lint:
    needs: ci_pipeline
    if: ${{ inputs.run-lint }}
    uses: ./.github/workflows/lint.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}

  # Job para ejecutar las pruebas
  run-tests:
    needs: ci_pipeline
    if: ${{ inputs.run-tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java-version }}
      
      - name: Build Java artifact
        run: |
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi
          echo "Building Java artifact"
          if [ -f "./mvnw" ]; then
            ./mvnw package
          elif [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew build
          else
            echo "No build tool found (Maven or Gradle). Skipping Java build step."
          fi

      - name: Run tests
        run: |
          if [ -n "${{ inputs.project-path }}" ] && [ -f "${{ inputs.project-path }}/build.gradle" ]; then
            echo "Running tests in specified project path: ${{ inputs.project-path }}"
            ./gradlew -p "${{ inputs.project-path }}" test
          else
            echo "No valid project path specified or build.gradle not found. Running tests in the root directory."
            ./gradlew test
          fi

  # Job separado para la limpieza
  clean-up:
    needs: [check-code-format, code-analysis, build-artifact, java-lint, run-tests]
    if: ${{ inputs.run-clean-up }}
    uses: ./.github/workflows/clean-up.yml
    with:
      language: ${{ inputs.language }}
      java-version: ${{ inputs.java-version }}
