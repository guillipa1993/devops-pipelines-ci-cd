name: "Lint Code"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: 'Azure Storage Account Name'
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: 'Azure Storage Account Key'
        required: true
    inputs:
      language:
        description: 'The programming language for linting'
        required: true
        type: string
      dotnet-version:
        description: 'La versión de .NET para usar en este pipeline'
        required: false
        type: string
      go-version:
        description: 'La versión de Go para usar en este pipeline'
        required: false
        type: string
      python-version:
        description: 'La versión de Python para usar en este pipeline'
        required: false
        type: string
      java-version:
        description: 'La versión de Java para usar en este pipeline'
        required: false
        type: string

jobs:
  run-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Ejecutar el linter de Go
      - name: Run Go Linter
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        run: |
          echo "Running Go formatter" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-go-linter.log"
          gofmt -l . 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-go-linter.log"

      # Ejecutar el linter de Node.js
      - name: Run Node.js Linter
        if: ${{ inputs.language == 'node' }}
        run: |
          echo "Running Prettier for Node.js" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-node-linter.log"
          npm install --global prettier
          prettier --check . 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-node-linter.log"

      # Ejecutar el linter de Python
      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      
      - name: Install Python Linter
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          pip install flake8
      
      - name: Run Python Linter and Save Results
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Running Python linter (flake8)" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-python-linter.log"
          flake8 . 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-python-linter.log" || true

      - name: Analyze flake8 Results
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        run: |
          echo "Analyzing flake8 results"
          if [ -s flake8_report.txt ]; then
            echo "Found issues in flake8 report:"
            cat flake8_report.txt
            # Opcionalmente, contar el número de problemas
            issue_count=$(wc -l < flake8_report.txt)
            echo "$issue_count issues found."
            # Agregar una condición en función del número de problemas
            if [ "$issue_count" -gt 100 ]; then
              echo "Too many issues ($issue_count) found in the codebase. Please review."
            fi
          else
            echo "No issues found by flake8."
          fi
        continue-on-error: true 

      # Ejecutar el linter de .NET
      - name: Run .NET Linter
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          if [ -z "${{ inputs.dotnet-version }}" ]; then
            echo "No .NET version provided. Skipping .NET format check."
          else
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 3 ]; then
              echo "Skipping .NET format: version is less than 3. Using 'dotnet build' instead."
              dotnet build --nologo --no-restore --verbosity=minimal 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-dotnet-linter.log" || true
            else
              echo "Running .NET linter (dotnet format)"
              dotnet format --verify-no-changes 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-dotnet-linter.log" || true
            fi
          fi
        continue-on-error: true 

      # Ejecutar el linter de Java
      - name: Set up Java
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: "${{ inputs.java-version }}"
          distribution: 'temurin'

      - name: Run Java Checkstyle
        if: ${{ inputs.language == 'java' }}
        run: |
          echo "Running Checkstyle for Java" | tee "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-linter.log"
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew checkstyleMain 2>&1 | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-linter.log" || true
          else
            echo "Gradle wrapper not found. Skipping Java linter." | tee -a "${GITHUB_WORKSPACE}/logs/${{ github.event.repository.name }}-${{ github.run_id }}-java-linter.log"
          fi        
        continue-on-error: true
      
      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in $GITHUB_WORKSPACE/logs/*.log; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                                    --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
                                    --container-name logs \
                                    --file "$log" \
                                    --name "$(basename $log)" \
                                    --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi