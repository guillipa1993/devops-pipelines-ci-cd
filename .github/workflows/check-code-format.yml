name: "Check Code Format"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: "Azure Storage Account Name"
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: "Azure Storage Account Key"
        required: true
    inputs:
      language:
        description: "The programming language for the code format check"
        required: true
        type: string
      project-path:
        description: "The project path containing the code"
        required: false
        type: string
      dotnet-version:
        description: "The .NET version to use for this pipeline"
        required: false
        type: string
      node-version:
        description: "The Node.js version to use for this pipeline"
        required: false
        type: string
      go-version:
        description: "The Go version to use for this pipeline"
        required: false
        type: string
      python-version:
        description: "The Python version to use for this pipeline"
        required: false
        type: string
      java-version:
        description: "The Java version to use for this pipeline"
        required: false
        type: string

jobs:
  check-code-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET Core
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "${{ inputs.dotnet-version }}"

      - name: Set up Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: "${{ inputs.node-version }}"

      - name: Install Black for Python
        if: ${{ inputs.language == 'python' }}
        run: pip install black

      - name: Run Code Formatter
        run: |
          # Crear carpeta de logs si no existe
          mkdir -p "$GITHUB_WORKSPACE/logs"

          # Definir nombre base para el log
          repo_name="${GITHUB_REPOSITORY##*/}"
          log_name="${repo_name}-${GITHUB_RUN_ID}"

          # Cambiar al directorio del proyecto si se especifica
          if [ -n "${{ inputs.project-path }}" ]; then
            cd "${{ inputs.project-path }}"
          fi

          # Ejecutar el formateo de código según el lenguaje
          if [ "${{ inputs.language }}" == "go" ]; then
            echo "Running Go formatter"
            gofmt -l . > "$GITHUB_WORKSPACE/logs/${log_name}-go-format.log" || true
          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "Running Prettier for Node.js"
            npx prettier --check . > "$GITHUB_WORKSPACE/logs/${log_name}-node-format.log" || true
          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "Running Black for Python"
            black --check . > "$GITHUB_WORKSPACE/logs/${log_name}-python-format.log" 2>&1 || true
          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "Running Gradle formatter for Java"
            if [ -f "${{ inputs.project-path }}/gradlew" ]; then
              chmod +x "${{ inputs.project-path }}/gradlew"
              "${{ inputs.project-path }}/gradlew" -p "${{ inputs.project-path }}" format > "$GITHUB_WORKSPACE/logs/${log_name}-java-format.log" || true
            else
              echo "Gradle wrapper (gradlew) not found in project path. Skipping Java code format check." > "$GITHUB_WORKSPACE/logs/${log_name}-java-format.log"
            fi
          elif [ "${{ inputs.language }}" == "dotnet" ]; then
            version=$(echo "${{ inputs.dotnet-version }}" | cut -d'.' -f1)
            if [ "$version" -lt 3 ]; then
              echo "Skipping dotnet format: version is less than 3. Your version: ${{ inputs.dotnet-version }}" > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-format.log"
            else
              echo "Running dotnet format"
              dotnet format > "$GITHUB_WORKSPACE/logs/${log_name}-dotnet-format.log" || true
            fi
          else
            echo "Unsupported language: ${{ inputs.language }}" > "$GITHUB_WORKSPACE/logs/${log_name}-unsupported-format.log"
          fi

          # Listar logs generados
          echo "Generated logs:"
          ls -la "$GITHUB_WORKSPACE/logs/"

      - name: Debug Azure Variables
        run: |
          echo "Azure Storage Account Name: $AZURE_STORAGE_ACCOUNT_NAME"
          echo "Azure Storage Account Key is set: [hidden]"

      - name: Set Azure Environment Variables
        run: |
          echo "Setting Azure environment variables..."
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> $GITHUB_ENV

      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in "$GITHUB_WORKSPACE/logs"/*.log; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "$AZURE_STORAGE_ACCOUNT_NAME" \
                                     --account-key "$AZURE_STORAGE_ACCOUNT_KEY" \
                                     --container-name logs \
                                     --file "$log" \
                                     --name "$(basename "$log")" \
                                     --overwrite
            done
          else
            echo "ERROR: Logs directory does not exist. Skipping upload." >&2
            exit 1
          fi
