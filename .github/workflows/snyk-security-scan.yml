name: "Scan Security Vulnerabilities"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: "Azure Storage Account Name"
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: "Azure Storage Account Key"
        required: true
      SNYK_TOKEN:
        description: "Snyk API Token"
        required: true
    inputs:
      language:
        description: "Programming language or tool for vulnerability scanning"
        required: true
        type: string
      project-path:
        description: "The project path containing the code to scan"
        required: true
        type: string
      requirements-path:
        description: "The path to requirements.txt or equivalent"
        required: false
        type: string
      docker-image:
        description: "Docker image for vulnerability scanning"
        required: false
        type: string
      dotnet-version:
        description: "La versión de .NET para usar en este pipeline"
        required: false
        type: string
      node-version:
        description: "La versión de Node.js para usar en este pipeline"
        required: false
        type: string
      go-version:
        description: "La versión de Go para usar en este pipeline"
        required: false
        type: string
      python-version:
        description: "La versión de Python para usar en este pipeline"
        required: false
        type: string
      java-version:
        description: "La versión de Java para usar en este pipeline"
        required: false
        type: string

jobs:
  snyk-scan-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuración para lenguajes y herramientas específicos
      - name: Set up Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Python dependencies
        if: ${{ inputs.language == 'python' && inputs.requirements-path }}
        run: |
          if [ -f "$GITHUB_WORKSPACE/${{ inputs.requirements-path }}requirements.txt" ]; then
            echo "Installing dependencies from $GITHUB_WORKSPACE/${{ inputs.requirements-path }}requirements.txt"
            pip install -r "$GITHUB_WORKSPACE/${{ inputs.requirements-path }}requirements.txt"
          else
            echo "No requirements.txt found in $GITHUB_WORKSPACE/${{ inputs.requirements-path }}"
          fi
  
      - name: Set up .NET
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Set up Java
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: "temurin"

      - name: Set up Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      # Ejecución de Snyk según el lenguaje o herramienta especificada
      - name: Run Snyk for Node.js
        if: ${{ inputs.language == 'node' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif-file-output=snyk-node.sarif

      - name: Run Snyk for Python
        if: ${{ inputs.language == 'python' }}
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          DEBUG: "*snyk*" # Enable debug logs
        with:
          args: test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif-file-output=snyk-python.sarif

      - name: Run Snyk for .NET
        if: ${{ inputs.language == 'dotnet' }}
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif-file-output=snyk-dotnet.sarif

      - name: Run Snyk for Java (Maven/Gradle)
        if: ${{ inputs.language == 'java' }}
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif-file-output=snyk-java.sarif

      - name: Run Snyk for Go
        if: ${{ inputs.language == 'go' }}
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif-file-output=snyk-go.sarif

      - name: Run Snyk for Docker
        if: ${{ inputs.language == 'docker' && inputs.docker-image != '' }}
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: container test ${{ inputs.docker-image }} --sarif-file-output=snyk-docker.sarif

      # Subida de resultados SARIF a GitHub Code Scanning
      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ inputs.language != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-${{ inputs.language }}.sarif

      # Mostrar enlace al Dashboard de Snyk
      - name: Show Snyk Dashboard Link
        run: |
          echo "View results in Snyk Dashboard: https://app.snyk.io/org/guillipa1993/projects"

      - name: Generate Snyk Report
        run: |
          mkdir -p "$GITHUB_WORKSPACE/logs"
          snyk test $GITHUB_WORKSPACE/${{ inputs.project-path }} --json > "$GITHUB_WORKSPACE/logs/snyk-report-${{ github.run_id }}.json"
          snyk test $GITHUB_WORKSPACE/${{ inputs.project-path }} --sarif > "$GITHUB_WORKSPACE/logs/snyk-report-${{ github.run_id }}.sarif"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Logs to Azure Storage
        run: |
          if [ -d "$GITHUB_WORKSPACE/logs" ]; then
            for log in $GITHUB_WORKSPACE/logs/*; do
              echo "Uploading $log to Azure Storage..."
              az storage blob upload --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                                     --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
                                     --container-name logs \
                                     --file "$log" \
                                     --name "$(basename "$log")" \
                                     --overwrite
            done
          else
            echo "No logs found to upload."
        continue-on-error: true

      - name: Show Snyk Dashboard Link
        run: |
          echo "To view detailed results, visit: https://app.snyk.io/org/guillipa1993/projects"
