name: "Scan Security Vulnerabilities"

on:
  workflow_call:
    secrets:
      AZURE_STORAGE_ACCOUNT_NAME:
        description: "Azure Storage Account Name"
        required: true
      AZURE_STORAGE_ACCOUNT_KEY:
        description: "Azure Storage Account Key"
        required: true
      SNYK_TOKEN:
        description: "Snyk API Token"
        required: true
    inputs:
      language:
        description: "Programming language or tool for vulnerability scanning"
        required: true
        type: string
      project-path:
        description: "The project path containing the code to scan"
        required: true
        type: string
      requirements-path:
        description: "The path to requirements.txt or equivalent"
        required: false
        type: string
      docker-image:
        description: "Docker image for vulnerability scanning"
        required: false
        type: string
      dotnet-version:
        description: "The .NET version to use"
        required: false
        type: string
      node-version:
        description: "The Node.js version to use"
        required: false
        type: string
      go-version:
        description: "The Go version to use"
        required: false
        type: string
      python-version:
        description: "The Python version to use"
        required: false
        type: string
      java-version:
        description: "The Java version to use"
        required: false
        type: string

jobs:
  snyk-scan-security:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: |
          echo "Installing Snyk CLI..."
          npm install -g snyk

      - name: Validate project directory
        run: |
          echo "Validating project directory..."
          if [ ! -d "$GITHUB_WORKSPACE/${{ inputs.project-path }}" ]; then
            echo "Error: Project path $GITHUB_WORKSPACE/${{ inputs.project-path }} does not exist."
            exit 1
          fi
          echo "Project directory validated: $GITHUB_WORKSPACE/${{ inputs.project-path }}"

      - name: Locate dependency files
        run: |
          echo "Locating dependency files..."
          find "$GITHUB_WORKSPACE/${{ inputs.project-path }}" -type f \( -name "requirements.txt" -o -name "pyproject.toml" \) > dependency_files.txt
          cat dependency_files.txt || echo "No dependency files found."

      - name: Set up Node.js
        if: ${{ inputs.language == 'node' && inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Set up Python
        if: ${{ inputs.language == 'python' && inputs.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Python dependencies
        if: ${{ inputs.language == 'python' }}
        run: |
          echo "Installing Python dependencies..."
          dependencies_found=false

          # Si se ha especificado requirements-path, se construye la ruta al requirements.txt
          if [ -n "${{ inputs.requirements-path }}" ] && [ -f "$GITHUB_WORKSPACE/${{ inputs.requirements-path }}/requirements.txt" ]; then
            pip install -r "$GITHUB_WORKSPACE/${{ inputs.requirements-path }}/requirements.txt"
            dependencies_found=true
          elif [ -f "$GITHUB_WORKSPACE/${{ inputs.project-path }}/pyproject.toml" ]; then
            pip install "$GITHUB_WORKSPACE/${{ inputs.project-path }}"
            dependencies_found=true
          fi

          if [ "$dependencies_found" = false ]; then
            echo "No valid dependency files found for installation."
            exit 1
          fi

      - name: Set up .NET
        if: ${{ inputs.language == 'dotnet' && inputs.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Set up Java
        if: ${{ inputs.language == 'java' && inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: "temurin"

      - name: Set up Go
        if: ${{ inputs.language == 'go' && inputs.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      # Ejemplo para Python:
      - name: Run Snyk for Python
        if: ${{ inputs.language == 'python' }}
        run: |
          echo "Running Snyk test for Python..."
          
          DEPENDENCY_BASE="$GITHUB_WORKSPACE/${{ inputs.project-path }}"
          if [ -n "${{ inputs.requirements-path }}" ]; then
            DEPENDENCY_BASE="$DEPENDENCY_BASE/${{ inputs.requirements-path }}"
          fi

          if [ -f "$DEPENDENCY_BASE/requirements.txt" ]; then
            echo "Found requirements.txt at: $DEPENDENCY_BASE/requirements.txt"
            DEPENDENCY_FILE="$DEPENDENCY_BASE/requirements.txt"
          elif [ -f "$GITHUB_WORKSPACE/${{ inputs.project-path }}/pyproject.toml" ]; then
            echo "Found pyproject.toml at: $GITHUB_WORKSPACE/${{ inputs.project-path }}/pyproject.toml"
            DEPENDENCY_FILE="$GITHUB_WORKSPACE/${{ inputs.project-path }}/pyproject.toml"
          else
            echo "No valid dependency file found in path: $DEPENDENCY_BASE or project path."
            exit 1
          fi

          echo "Using dependency file: $DEPENDENCY_FILE"
          snyk test --file="$DEPENDENCY_FILE" --sarif-file-output=snyk-python.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload SARIF to GitHub Code Scanning
        if: ${{ inputs.language == 'python' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-python.sarif

      - name: Show Snyk Dashboard Link
        run: |
          echo "View results in Snyk Dashboard: https://app.snyk.io/org/guillipa1993/projects"

      - name: Upload Logs to Azure Storage
        run: |
          echo "Uploading SARIF logs to Azure Storage..."

          if [ -f snyk-python.sarif ]; then
            # Tomamos el repo actual y el run_id para nombrar
            repo_name="${GITHUB_REPOSITORY##*/}"
            new_sarif_name="${repo_name}-${GITHUB_RUN_ID}-snyk-python.sarif"

            echo "Renaming snyk-python.sarif to $new_sarif_name"
            mv snyk-python.sarif "$new_sarif_name"

            az storage blob upload \
              --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
              --account-key "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" \
              --container-name logs \
              --file "$new_sarif_name" \
              --name "$new_sarif_name" \
              --overwrite
          else
            echo "No SARIF log found to upload."
        env:
          AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

      - name: Show Snyk Dashboard Link Again
        run: |
          echo "To view detailed results, visit: https://app.snyk.io/org/guillipa1993/projects"
