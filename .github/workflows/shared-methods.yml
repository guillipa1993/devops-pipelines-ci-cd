name: "Shared Methods"

on:
  workflow_call:

jobs:
  send-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Enviar notificación
        run: echo "Enviando notificación..."

  check-code-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Revisar formato de código
        run: |
          if [ "${{ matrix.language }}" == "go" ]; then
            gofmt -l .
          elif [ "${{ matrix.language }}" == "node" ]; then
            npx prettier --check .
          elif [ "${{ matrix.language }}" == "python" ]; then
            black --check .
          elif [ "${{ matrix.language }}" == "java" ]; then
            ./mvnw formatter:validate
          fi

  scan-security-vulnerabilities:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Escanear vulnerabilidades
        run: |
          if [ "${{ matrix.language }}" == "go" ]; then
            go list -m all | nancy sleuth
          elif [ "${{ matrix.language }}" == "node" ]; then
            npm audit --production
          elif [ "${{ matrix.language }}" == "python" ]; then
            safety check
          elif [ "${{ matrix.language }}" == "java" ]; then
            ./mvnw org.owasp:dependency-check-maven:check
          fi

  build-artifact:
    runs-on: ubuntu-latest
    needs: [check-code-format, scan-security-vulnerabilities]
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Construir artefacto
        run: |
          if [ "${{ matrix.language }}" == "go" ]; then
            go build -o output/app
          elif [ "${{ matrix.language }}" == "node" ]; then
            npm run build
          elif [ "${{ matrix.language }}" == "python" ]; then
            python setup.py bdist_wheel
          elif [ "${{ matrix.language }}" == "java" ]; then
            ./mvnw package
          fi

  generate-coverage:
    runs-on: ubuntu-latest
    needs: build-artifact
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Generar cobertura de código
        run: |
          if [ "${{ matrix.language }}" == "go" ]; then
            go test -coverprofile=coverage.out ./...
          elif [ "${{ matrix.language }}" == "node" ]; then
            npm run coverage
          elif [ "${{ matrix.language }}" == "python" ]; then
            pytest --cov=.
          elif [ "${{ matrix.language }}" == "java" ]; then
            ./mvnw jacoco:report
          fi

  upload-coverage-report:
    runs-on: ubuntu-latest
    needs: generate-coverage
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Subir reporte de cobertura
        uses: codecov/codecov-action@v2
        with:
          file: ${{ matrix.language == 'go' && 'coverage.out' || matrix.language == 'node' && './coverage/lcov.info' || matrix.language == 'python' && './coverage.xml' || matrix.language == 'java' && './target/site/jacoco/jacoco.xml' }}
          flags: ${{ matrix.language }}

  clean-up:
    runs-on: ubuntu-latest
    needs: upload-coverage-report
    strategy:
      matrix:
        language: [go, node, python, java]
    steps:
      - name: Limpiar artefactos de construcción
        run: |
          if [ "${{ matrix.language }}" == "go" ]; then
            rm -rf ./bin ./build
          elif [ "${{ matrix.language }}" == "node" ]; then
            rm -rf ./dist ./build
          elif [ "${{ matrix.language }}" == "python" ]; then
            rm -rf ./dist ./build
          elif [ "${{ matrix.language }}" == "java" ]; then
            ./mvnw clean
          fi
